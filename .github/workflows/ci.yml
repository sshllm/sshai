name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read

env:
  PROJECT_NAME: sshai

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Check language files
      run: |
        if [ ! -f "pkg/i18n/lang/lang-zh-cn.yaml" ]; then
          echo "Creating placeholder Chinese language file"
          mkdir -p pkg/i18n/lang
          echo "# Chinese language pack" > pkg/i18n/lang/lang-zh-cn.yaml
        fi
        if [ ! -f "pkg/i18n/lang/lang-en-us.yaml" ]; then
          echo "Creating placeholder English language file"
          mkdir -p pkg/i18n/lang
          echo "# English language pack" > pkg/i18n/lang/lang-en-us.yaml
        fi

    - name: Run tests
      run: |
        if [ -f "go.mod" ]; then
          if go list ./... | grep -q .; then
            go test -v ./...
          else
            echo "No tests found, skipping test execution"
          fi
        fi

    - name: Set version variables
      id: version
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.9.19-ci")
        GIT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GO_VERSION=$(go version | cut -d' ' -f3)
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=${GIT_COMMIT}" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_OUTPUT
        echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_OUTPUT
        
        echo "Build Info:"
        echo "  Version: ${VERSION}"
        echo "  Commit: ${GIT_COMMIT}"
        echo "  Build Time: ${BUILD_TIME}"
        echo "  Go Version: ${GO_VERSION}"

    - name: Build for Linux AMD64
      run: |
        mkdir -p build
        LDFLAGS="-X 'sshai/pkg/version.Version=${{ steps.version.outputs.VERSION }}' \
                 -X 'sshai/pkg/version.GitCommit=${{ steps.version.outputs.GIT_COMMIT }}' \
                 -X 'sshai/pkg/version.BuildTime=${{ steps.version.outputs.BUILD_TIME }}' \
                 -X 'sshai/pkg/version.GoVersion=${{ steps.version.outputs.GO_VERSION }}' \
                 -s -w"
        go build -ldflags "${LDFLAGS}" -o build/sshai_linux_amd64 cmd/main.go

    - name: Build for multiple platforms
      run: |
        LDFLAGS="-X 'sshai/pkg/version.Version=${{ steps.version.outputs.VERSION }}' \
                 -X 'sshai/pkg/version.GitCommit=${{ steps.version.outputs.GIT_COMMIT }}' \
                 -X 'sshai/pkg/version.BuildTime=${{ steps.version.outputs.BUILD_TIME }}' \
                 -X 'sshai/pkg/version.GoVersion=${{ steps.version.outputs.GO_VERSION }}' \
                 -s -w"
        
        GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/sshai_darwin_amd64 cmd/main.go
        GOOS=windows GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/sshai_windows_amd64.exe cmd/main.go

    - name: Check binary size
      run: |
        echo "Binary sizes:"
        ls -lh build/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ci-build-${{ github.sha }}
        path: build/
        retention-days: 7