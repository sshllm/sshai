name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write
  actions: read

env:
  PROJECT_NAME: sshai

jobs:
  build:
    name: Build for multiple platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        GIT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GO_VERSION=$(go version | cut -d' ' -f3)
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=${GIT_COMMIT}" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_OUTPUT
        echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_OUTPUT
        
        echo "Release Build Info:"
        echo "  Version: ${VERSION}"
        echo "  Commit: ${GIT_COMMIT}"
        echo "  Build Time: ${BUILD_TIME}"
        echo "  Go Version: ${GO_VERSION}"

    - name: Check language files
      run: |
        if [ ! -f "pkg/i18n/lang/lang-zh-cn.yaml" ]; then
          echo "Warning: Chinese language file not found, creating placeholder"
          mkdir -p pkg/i18n/lang
          echo "# Chinese language pack" > pkg/i18n/lang/lang-zh-cn.yaml
        fi
        if [ ! -f "pkg/i18n/lang/lang-en-us.yaml" ]; then
          echo "Warning: English language file not found, creating placeholder"
          mkdir -p pkg/i18n/lang
          echo "# English language pack" > pkg/i18n/lang/lang-en-us.yaml
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        OUTPUT_NAME="${PROJECT_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.suffix }}"
        
        # 使用与Makefile相同的LDFLAGS
        LDFLAGS="-X 'sshai/pkg/version.Version=${{ steps.version.outputs.VERSION }}' \
                 -X 'sshai/pkg/version.GitCommit=${{ steps.version.outputs.GIT_COMMIT }}' \
                 -X 'sshai/pkg/version.BuildTime=${{ steps.version.outputs.BUILD_TIME }}' \
                 -X 'sshai/pkg/version.GoVersion=${{ steps.version.outputs.GO_VERSION }}' \
                 -s -w"
        
        echo "Building ${OUTPUT_NAME} with version info..."
        go build -ldflags "${LDFLAGS}" -o "build/${OUTPUT_NAME}" cmd/main.go
        echo "BINARY_NAME=${OUTPUT_NAME}" >> $GITHUB_ENV

    - name: Create release package
      run: |
        DIST_DIR="dist/${PROJECT_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"
        mkdir -p "$DIST_DIR"
        
        # Copy binary
        cp "build/${BINARY_NAME}" "$DIST_DIR/"
        
        # Copy config file
        cp config.yaml.example "$DIST_DIR/"
        
        # Create README
        cat > "$DIST_DIR/README.txt" << EOF
        SSHAI - SSH AI Assistant (Embedded Language Pack Version)
        Version: ${{ steps.version.outputs.VERSION }}
        Platform: ${{ matrix.goos }}/${{ matrix.goarch }}
        Git Commit: ${{ steps.version.outputs.GIT_COMMIT }}
        Build Time: ${{ steps.version.outputs.BUILD_TIME }}
        Go Version: ${{ steps.version.outputs.GO_VERSION }}

        Deployment Instructions:
        1. Copy ${BINARY_NAME} and config.yaml.example to your target server
        2. Modify config.yaml.example as needed
        3. Run ./${BINARY_NAME} to start the service

        Note: This version has language packs embedded in the binary, no additional language files needed.

        Configuration:
        - server.host: Server listening address
        - server.port: Server listening port
        - api.base_url: AI API base URL
        - language: Interface language (zh-cn or en-us)

        For more information: https://github.com/sshllm/sshai
        EOF
        
        # Create archive
        cd dist
        zip -r "${PROJECT_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}_${{ steps.version.outputs.VERSION }}.zip" "${PROJECT_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}/"
        cd ..
        
        echo "ARCHIVE_NAME=${PROJECT_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}_${{ steps.version.outputs.VERSION }}.zip" >> $GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}_${{ matrix.goos }}_${{ matrix.goarch }}
        path: |
          build/${{ env.BINARY_NAME }}
          dist/${{ env.ARCHIVE_NAME }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release_assets
        find artifacts -name "*.zip" -exec cp {} release_assets/ \;
        ls -la release_assets/

    - name: Generate release notes from commits
      id: release_notes
      run: |
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # 如果没有上一个标签，使用最初的提交
        if [ -z "$PREVIOUS_TAG" ]; then
          COMMIT_RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
        else
          COMMIT_RANGE="${PREVIOUS_TAG}..HEAD"
        fi
        
        echo "Generating release notes for commits: $COMMIT_RANGE"
        
        # 检查是否有提交
        COMMIT_COUNT=$(git rev-list --count $COMMIT_RANGE 2>/dev/null || echo "0")
        if [ "$COMMIT_COUNT" = "0" ]; then
          echo "No commits found in range $COMMIT_RANGE, generating basic release notes"
          
          # 生成基础发布说明
          cat > release_notes.md << EOF
        # SSHAI ${{ steps.version.outputs.VERSION }} Release
        
        ## 📋 本次更新内容
        
        ### 🔧 其他更改 (Other Changes)
        - 版本发布: ${{ steps.version.outputs.VERSION }}
        - 构建优化和版本管理改进
        
        ## 🎯 核心特性 (Core Features)
        - SSH AI Assistant with embedded language packs
        - Multi-platform support (Linux, macOS, Windows)
        - Support for multiple AI models (DeepSeek, Hunyuan, etc.)
        - Real-time thinking display for compatible models
        - Configurable prompts and authentication
        - Beautiful interface with colors and animations
        - SSH Keys免密登录功能
        - AI模型温度设置功能
        - 动态配置文件指定功能
        EOF
        else
          echo "Found $COMMIT_COUNT commits to analyze"
          
          # 分析提交记录并分类
          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          DOCS=""
          BREAKING=""
          OTHER=""
          
          while IFS= read -r commit; do
            # 检测破坏性更改
            if [[ $commit == *"BREAKING CHANGE"* ]] || [[ $commit == *"!"* ]] && [[ $commit == *":"* ]]; then
              BREAKING="${BREAKING}- ⚠️ ${commit}\n"
            # 新功能
            elif [[ $commit =~ ^feat(\(.+\))?:.*$ ]] || [[ $commit == *"添加"* ]] || [[ $commit == *"新增"* ]]; then
              clean_msg=$(echo "$commit" | sed 's/^feat[^:]*: *//')
              FEATURES="${FEATURES}- ${clean_msg}\n"
            # 问题修复
            elif [[ $commit =~ ^fix(\(.+\))?:.*$ ]] || [[ $commit == *"修复"* ]] || [[ $commit == *"解决"* ]]; then
              clean_msg=$(echo "$commit" | sed 's/^fix[^:]*: *//')
              FIXES="${FIXES}- ${clean_msg}\n"
            # 性能优化和改进
            elif [[ $commit == *"优化"* ]] || [[ $commit == *"improve"* ]] || [[ $commit == *"enhance"* ]] || [[ $commit == *"重构"* ]] || [[ $commit =~ ^refactor.*$ ]]; then
              IMPROVEMENTS="${IMPROVEMENTS}- ${commit}\n"
            # 文档更新
            elif [[ $commit == *"文档"* ]] || [[ $commit == *"doc"* ]] || [[ $commit == *"README"* ]] || [[ $commit =~ ^docs.*$ ]]; then
              DOCS="${DOCS}- ${commit}\n"
            # 其他更改
            else
              OTHER="${OTHER}- ${commit}\n"
            fi
          done < <(git log --pretty=format:"%s" $COMMIT_RANGE)
          
          # 生成发布说明
          cat > release_notes.md << EOF
        # SSHAI ${{ steps.version.outputs.VERSION }} Release
        
        ## 📋 本次更新内容
        
        EOF
          
          # 优先显示破坏性更改
          if [ ! -z "$BREAKING" ]; then
            cat >> release_notes.md << EOF
        ### ⚠️ 破坏性更改 (Breaking Changes)
        $(echo -e "$BREAKING")
        **请在升级前仔细阅读上述更改，可能需要调整您的配置或使用方式。**
        
        EOF
          fi
          
          if [ ! -z "$FEATURES" ]; then
            cat >> release_notes.md << EOF
        ### 🚀 新功能 (New Features)
        $(echo -e "$FEATURES")
        EOF
          fi
          
          if [ ! -z "$FIXES" ]; then
            cat >> release_notes.md << EOF
        ### 🐛 问题修复 (Bug Fixes)
        $(echo -e "$FIXES")
        EOF
          fi
          
          if [ ! -z "$IMPROVEMENTS" ]; then
            cat >> release_notes.md << EOF
        ### ⚡ 性能优化 (Improvements)
        $(echo -e "$IMPROVEMENTS")
        EOF
          fi
          
          if [ ! -z "$DOCS" ]; then
            cat >> release_notes.md << EOF
        ### 📖 文档更新 (Documentation)
        $(echo -e "$DOCS")
        EOF
          fi
          
          if [ ! -z "$OTHER" ]; then
            cat >> release_notes.md << EOF
        ### 🔧 其他更改 (Other Changes)
        $(echo -e "$OTHER")
        EOF
          fi
          
          cat >> release_notes.md << EOF
        
        ## 🎯 核心特性 (Core Features)
        - SSH AI Assistant with embedded language packs
        - Multi-platform support (Linux, macOS, Windows)
        - Support for multiple AI models (DeepSeek, Hunyuan, etc.)
        - Real-time thinking display for compatible models
        - Configurable prompts and authentication
        - Beautiful interface with colors and animations
        - SSH Keys免密登录功能
        - AI模型温度设置功能
        - 动态配置文件指定功能
        EOF
        fi
        
        # 继续添加通用内容
        cat >> release_notes.md << EOF
        
        ## 📦 Downloads
        Choose the appropriate package for your platform:

        ### Linux
        - **Linux AMD64**: \`sshai_linux_amd64_${{ steps.version.outputs.VERSION }}.zip\`
        - **Linux ARM64**: \`sshai_linux_arm64_${{ steps.version.outputs.VERSION }}.zip\`

        ### macOS
        - **macOS Intel**: \`sshai_darwin_amd64_${{ steps.version.outputs.VERSION }}.zip\`
        - **macOS Apple Silicon**: \`sshai_darwin_arm64_${{ steps.version.outputs.VERSION }}.zip\`

        ### Windows
        - **Windows AMD64**: \`sshai_windows_amd64_${{ steps.version.outputs.VERSION }}.zip\`

        ## 🛠️ 安装指南 (Installation Guide)
        
        ### 首次安装 (First Installation)
        1. 下载适合您平台的安装包
        2. 解压缩文件
        3. 复制 \`config.yaml.example\` 为 \`config.yaml\` 并配置您的API密钥
        4. 运行二进制文件启动SSH AI服务
        
        ### 升级指南 (Upgrade Guide)
        1. 停止当前运行的SSHAI服务
        2. 备份您的 \`config.yaml\` 配置文件
        3. 下载新版本并解压
        4. 将备份的配置文件复制到新版本目录
        5. 启动新版本服务
        
        **注意**: 如果存在破坏性更改，请查看上方的更改说明。

        ## 📖 文档 (Documentation)
        - [README (中文)](https://github.com/sshllm/sshai/blob/main/README.md)
        - [README (English)](https://github.com/sshllm/sshai/blob/main/README_EN.md)
        - [配置指南 (Configuration Guide)](https://github.com/sshllm/sshai/blob/main/docs/CONFIG_GUIDE.md)

        ## 🔧 快速开始 (Quick Start)
        
        ### Linux/macOS
        \`\`\`bash
        # 下载并解压 (以Linux AMD64为例)
        wget https://github.com/sshllm/sshai/releases/download/${{ steps.version.outputs.VERSION }}/sshai_linux_amd64_${{ steps.version.outputs.VERSION }}.zip
        unzip sshai_linux_amd64_${{ steps.version.outputs.VERSION }}.zip
        cd sshai_linux_amd64
        
        # 配置API密钥
        cp config.yaml.example config.yaml
        nano config.yaml  # 编辑配置文件
        
        # 启动服务
        ./sshai_linux_amd64
        
        # 从另一个终端连接
        ssh user@localhost -p 2213
        \`\`\`
        
        ### Windows
        \`\`\`powershell
        # 解压下载的zip文件
        # 复制并编辑配置文件
        copy config.yaml.example config.yaml
        notepad config.yaml
        
        # 启动服务
        .\\sshai_windows_amd64.exe
        
        # 使用SSH客户端连接
        ssh user@localhost -p 2213
        \`\`\`

        ## 📊 版本信息 (Version Info)
        - **版本号**: ${{ steps.version.outputs.VERSION }}
        - **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Git提交**: $(git rev-parse --short HEAD)
        - **Go版本**: $(go version | cut -d' ' -f3)
        - **提交范围**: $COMMIT_RANGE
        - **包含提交数**: $(git rev-list --count $COMMIT_RANGE)
        
        ## 🔗 相关链接 (Links)
        - [项目主页 (Homepage)](https://github.com/sshllm/sshai)
        - [使用文档 (Documentation)](https://github.com/sshllm/sshai/blob/main/docs/)
        - [问题反馈 (Issues)](https://github.com/sshllm/sshai/issues)
        - [讨论区 (Discussions)](https://github.com/sshllm/sshai/discussions)
        
        ## 🐛 问题反馈 (Bug Reports)
        如果您遇到任何问题，请在我们的 [GitHub Issues](https://github.com/sshllm/sshai/issues) 页面报告。
        
        ## 🙏 致谢 (Acknowledgments)
        感谢所有贡献者和用户的支持！
        EOF
        
        echo "Generated release notes:"
        cat release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: SSHAI ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: release_assets/*
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update latest release info
      run: |
        echo "✅ Release ${{ steps.version.outputs.VERSION }} created successfully!"
        echo "📦 Assets uploaded:"
        ls -la release_assets/
        echo ""
        echo "🔗 Release URL: https://github.com/sshllm/sshai/releases/tag/${{ steps.version.outputs.VERSION }}"
        echo "📋 Release notes generated from commits since last tag"
        echo "🎉 Release is now available for download!"